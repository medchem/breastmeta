#-------------------------------------------------------------------------------
# Name:        pathconstruct
# Purpose:     function for constructing the pathology library
#
# Author:      kpchang
#
# Created:     24/07/2016
# Copyright:   (c) kpchang 2016
# Licence:     <your licence>
#-------------------------------------------------------------------------------
from pathsqlite import reportsqlwriter
from reportreading import reportreader
from reportreading import pathnamereader
import sqlite3

def construct_pathreport(fpath):
    """
        Generate a reportsqlwriter.PathReport using pathology report file
        of correct format generated by CMUH HIS system.
        Will lead to error if not corrent format.
    """
    fname = str(fpath)
    namedic = pathnamereader.resolve_file_name(fpath)
    if namedic is None:
        return None
    contentdic = reportreader.read_report(fname)
    report = reportsqlwriter.PathReport()
    report.take_pathnamereader(namedic)
    report.take_reportreader(contentdic)
    return report

def pathsql_inject(fpath, connection):
    """
        Quick-insert a pathology report of particular format into a connected
        sql "report" table.
        **Warning: This function does not check if the table exist.
    """
    preport = construct_pathreport(fpath)
    if preport is None:
        return
    pathno = preport.pathology_number
    reportsqlwriter.write_path_table(preport, connection)
    print("Injected pathology report number {0} into library.".format(pathno) )

def inject_folder_files(folderpath, connection):
    """
        inject a folder of files.
        create the table if not included.
    """
    reportsqlwriter.create_path_table(connection)
    filelist = pathnamereader.list_file_name(folderpath)
    print(filelist)
    for fpath in filelist:
        pathsql_inject(fpath, connection)
    connection.commit()


def main():
    folderpath = "reportreader/testfile_pathname"
    dbpath = "pathsqlite/testfile/testcase.db"
    conn = sqlite3.connect(dbpath)
    inject_folder_files(folderpath, conn)
    conn.close()


if __name__ == '__main__':
    main()
